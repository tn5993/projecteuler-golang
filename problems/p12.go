package problems

import (
	factor "github.com/tn5993/projecteuler/utils/simplemath/factorization"
)

type Problem12 struct {
}

func NewProblem12() IProblem {
	return Problem12{}
}

func (p Problem12) Solve() int64 {
	n := int64(1)
	for true {
		num1 := n
		num2 := n + 1

		if num1%2 == 0 {
			num1 = num1 / 2
		}

		if num2%2 == 0 {
			num2 = num2 / 2
		}
		if factor.DivisorsOf(int64(num1))*factor.DivisorsOf(int64(num2)) >= 500 {
			break
		} else {
			n += 1
		}

	}

	return int64(n * (n + 1) / 2)

}

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
